ASYNC JS, CALLBACKS, PROMISES -- 
_____________________________________________

THE CALL STACK -- 
_____________________________________________

 The mechanism the JS interpreter uses to keep track of its place in a script that calls multiple functions. How JS 'knows' what function is
 currently being run and what functions are called from within that function. 

 Call in Call Stack refers to which functions are being called. 

 The Stack part has to deal with a data structure. 

 Just like a stack of books or a stack of dishes the last thing that you put in will be on top. And it will be the first thing that you remove

 HOW IT WORKS: 

 -When a script calls a function, the interpreter adds it to the call stack and then starts carrying out the function. 
 -Any functions that are called by that function are added to the call stack further up, and run where their calls are reached. 
 -When the current function is finished, the interpreter takes it off the stack and resumes execution where it left off in the last code 
 listing. 


const multiply = (x,y) => x * y; 

const square = (x) => multiply(x,x);

const isRightTriangle = (a,b,c) => {
    return square(a) + square(b) === square(c);
} 
isRightTriangle(3,4,5);

the call stack will run through all these functions to the very top and only return back down to the second argument in the invocation of isRightTriangle
when it has a value. It will do so until there is nothing left to return. 
