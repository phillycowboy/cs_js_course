Values and Variables --
__________________________________________________
building blocks of the language 

Goals-- 
- work with primitive types 
- understand let and const 
- use string template literals 
- work with common operators and methods 

Primitive Types -- 
__________________________________________________
-Number -- numeric data number of stars on a review 1-5 
-String -- textual information what a user types 
-Boolean --true or false (checkbox)
-Null 
-Undefined 

others 
-Symbol 
-BigInt

JS in Console-- 
__________________________________________________
Usually you write your code in  a single js file and then run it in the browser-- you can also test your code and play around with JS code in browser 
with your dev console. 

1st of Primitive Types-- Number 

__________________________________________________
Numbers in Js --

JavaScript has one number type 
Positive Numbers!
Negative Numbers! 
Whole Numbers (integers)!
Decimal numbers 

JS stores numbers in memory 

Simple Operations -- 

Addition  + 
Subtraction  - 
Multiplication * 
Division  /
Modulo  %  remainder operator 

** - to the power of 2**3 //=> 8


Order of Presedence-- which operators get ran first 
P - parenthesis ()  anything you wrap in parenthesis will get run first. 
E - Exponentiation ** 
M - Multiplication *
D - Division /
A - Addition +
S - Subtraction - 



NaN & Infinity --
__________________________________________________

NaN - Not a Number NaN is a numeric value that represents something that is not a number 

0/0 NaN
1 + NaN

Theres no way to store the value of Infinity but to render it 

1/0 Infinity 

-1/0 -Infinity 

QUIZ -- 
__________________________________________________

What does this evaluate to? 

1.) 1.5 + 1.5 * 2 

4.5

2.) (10 % 6) ** 2 

16

3.) 200 + 0/0 
NaN  -- NaN cant be coerced into a number 


Variables and Let -- 
__________________________________________________

Variables are like "Labeled jars" for a value in JavaScript

We can store a value and give it a name, so that we can ...
-recall it 
-use it 
-or change it later on 

Syntax -- 

let someName = value; 

Recall Variables -- 
let hens = 4;
let roosters = 2;

hens + roosters //6

Update Values -- 

let hens = 4; 

hens - 1 //3 

hens; //still 4    (doesnt change/reassign value)

hens = hens - 1 

hens // 3           (does change/reassign value)

A few things about Variables: 
- you cant just name a variable anything for example: let let = 10; let is a reserved word for JS 
- document is also a reserved word and it represents your document on the browser 
- always camelCase your variable names and make an association with the name so that it makes sense 


Unary operators -- 
__________________________________________________

so to update a variable we would have to do this: 

let score = 10; 

score = score + 1 

score //11

Now the shorthand for this is: 

score += 1 

score // 11 

you can also do the same with Subtraction '-='

and Multiplication *= 

let score = 150; 
let bonusMult = 3; 

score *= bonusMult // 450 

NOW Unary Operators are operators that only have one side 

let counter = 0; 

counter ++; 

counter // 1 

++ will add by one 

-- will subtract by one 


Introducing CONST -- 

__________________________________________________

const works just like let, except you cannot change the value once its been declared 

const age = 10; 
age = 21 // error! 

const hens = 4; 
hens = hens + 1 //error!

Use const when you only need a constant value, like your name wouldnt change of the value of pi or the days in the week 

Also you cant use a a const variable name ever again once its been declared 


The Legacy of var -- 
__________________________________________________

Before let and const, var was the only way to declare a variable. These days there isnt really a reason to use it. 

Because you can freely reassign names and values and have mulitple variables that are named the same thing but represent completely different
values. 

DONT USE IT 


Variables Quiz -- 

__________________________________________________

What is the value of eggCount? 

let eggCount = 42; 
eggCount + 2; 

42 

TECHNICALLY we are just saving the value in eggCount but adding to it will temporarily add 2 to it 
if you call eggCount again it still has a value of 42

What is the value of rating after this code runs 

const rating = 7.5; 
rating = 8 

error! 

Whats the value of wind_speed? 

let windSpeed = 76;
windSpeed += 5;
windSpeed --; 

80
